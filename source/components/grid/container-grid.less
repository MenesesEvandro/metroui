@import "../../include/vars";

.container-query {
    container: container-query / inline-size;
}

[class*=qc-] {
    position: relative;
    display: block;
    padding: 0;
    min-height: 1px;
    flex: 0 0 100%;
    max-width: calc(100% - var(--grid-gutter));
}


@container container-query (width >= @fs) {
    each(range(1, 12), .(@k) {
        .qc-fs-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}

@container container-query (width >= @xs) {
    each(range(1, 12), .(@k) {
        .qc-xs-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}

@container container-query (width >= @sm) {
    each(range(1, 12), .(@k) {
        .qc-sm-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}

@container container-query (width >= @ld) {
    each(range(1, 12), .(@k) {
        .qc-ld-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}

@container container-query (width >= @md) {
    each(range(1, 12), .(@k) {
        .qc-md-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}

@container container-query (width >= @lg) {
    each(range(1, 12), .(@k) {
        .qc-lg-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}

@container container-query (width >= @xl) {
    each(range(1, 12), .(@k) {
        .qc-xl-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}

@container container-query (width >= @xxl) {
    each(range(1, 12), .(@k) {
        .qc-cell-xxl-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}

@container container-query (width >= @xxxl) {
    each(range(1, 12), .(@k) {
        .qc-xxxl-@{k} {
            flex: 0 0 calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
            max-width: calc( @gridCellBaseSize * @k - var(--grid-gutter) ) ;
        }
    })
}
